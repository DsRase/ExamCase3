Модель обмена сообщениями Publish / Subscribe
- Принципы работы брокеров сообщений
- Публикация сообщений
- Подписка на очереди сообщений
- Модель realtime подписки / доставки
- Модель durable подписки / доставки

Описать основные принципы обмена сообщениями между сервисами по модели pub/sub. Особенности использования realtime брокеров сообщений. Особенности использования durable очередей (с возможностью длительного хранения и восстановления истории)

Ответ:
Насколько я понимаю, это одна из реализаций асинхронного подключения, как вебсокеты.
Суть такой модели заключается в том, что микросервисы взаимодействуют между собой путём передачи сообщений (publish) в общие каналы,
к которым подключены другие микросервисы. Тем самым, можно отправив одно сообщение, получить его сразу в нескольких местах.

Брокеры сообщений - это ПО, которое временно хранит в себе публицируемые данные, а после, отправляет куда нужно. Грубо говоря
это маршрутизатор в мире асинхронной микросервисной архитектуры. Примером брокера сообщений, который знаю я, является Redis.

Особенность публикации сообщения заключается в том, что Publisher может вообще не волноваться о том, кто и получит ли вообще
его сообщения subscriber. Сообщение важно лишь доставить по определённому каналу, а остальное - на стороне получателей.

Подписка на очереди сообщений осуществляется как раз через брокер сообщений. Брокер, как я уже описал выше, является посредником, между
отправителем и подписчиком. Сервису подписки достаточно лишь выбрать тему, и асинхронно, в порядке очереди, получать свои сообщения.
Необязательно это делать сразу же, брокер имеет хранилище (или коротковременное или долговременное), в котором и заполняются сообщения.
Подписчики просто их оттуда получают, в зависимости от темы, подобно очередям, если воспринимать их как структуры данных, например стек
или дек.

Однако, если подписчик не в состоянии просмотреть сообщение, то есть он неактивен, то в модели Realtime подписки / доставки такие
сообщения просто теряются. История сообщений не сохраняется, и следовательно брокер сообщения не хранит. Зачем это нужно? Ну, например
для онлайн уведомлений при использовании вебсокетов.

Противоположностью такой модели является Durable, в которой сообщения как раз таки хранятся и могут быть доставлены позже, даже
если подписчик отвалился а потом подключился вновь. В этой системе брокер хранит сообщения в своей очереди, которая уже больше похожа не
на стек, а на самую простую структуру данных. Мы можем брать сообщения с начала и с конца. Такая модель применяется, например, для
долгих обработок заказов онлайн, копированием данных между сервисами, в зависимости от их нагруженности (какие-то сейчас банально
сообщение принять не могут, например) и так далее. 

Если подытожить, то получаем: Realtime модель отправляет сообщения сразу и быстро, но абсолютно ненадёжно и без сохранения данных.
Durable модель надёжная, но не такая быстрая, ведь нужно тратить время на хранение данных, а так же ввод/вывод, и репликацию их
между сервисами. 